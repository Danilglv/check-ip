{"version":3,"sources":["CheckIp.js","serviceWorker.js","index.js"],"names":["CheckIp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","localStorage","getItem","state","ip","list","info","JSON","parse","event","preventDefault","listArray","ipData","that","fetch","then","response","status","json","data","unshift","city_rus","setItem","stringify","setState","alert","catch","err","console","log","target","value","removeItem","react_default","a","createElement","className","onSubmit","handleSubmit","bind","type","placeholder","onChange","handleIpChange","map","adress","index","key","onClick","clearHistory","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_CheckIp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77892d91.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n\r\n\r\nclass CheckIp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (localStorage.getItem('listArray') == null) {\r\n      this.state = {\r\n        ip: '',\r\n        list: [],\r\n        info: []\r\n      }\r\n    } else if (localStorage.getItem('ipData') == null) {\r\n        this.state = {\r\n        ip: '',\r\n        list: [],\r\n        info: []\r\n      }\r\n    } else {\r\n      this.state = {\r\n        ip: '',\r\n        list: JSON.parse(localStorage.getItem('listArray')),\r\n        info: JSON.parse(localStorage.getItem('ipData'))\r\n      }\r\n    }\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let listArray = this.state.list;\r\n    let ipData = this.state.info;\r\n    let url = 'https://api.2ip.ua/geo.json?ip=';\r\n    let that = this;\r\n    fetch(url + this.state.ip).then(function(response) {\r\n        if (response.status !== 200) { \r\n        alert('Looks like there was a problem. Status Code: ' + \r\n        response.status); \r\n        return; \r\n        }\r\n\r\n         response.json().then(function(data) {\r\n          ipData.unshift(data.city_rus);\r\n          localStorage.setItem('ipData', JSON.stringify(ipData)); \r\n\r\n          listArray.unshift(data.ip);\r\n          localStorage.setItem('listArray', JSON.stringify(listArray));\r\n\r\n                  that.setState({\r\n                  list: JSON.parse(localStorage.getItem('listArray')),\r\n                  info: JSON.parse(localStorage.getItem('ipData')),\r\n                  ip: ''\r\n            });\r\n                  \r\n        }); \r\n      })\r\n      .catch(function(err) { \r\n                  console.log('Fetch Error :-S', err); \r\n                  });\r\n  }\r\n\r\n  handleIpChange(event) {\r\n    this.setState({ip: event.target.value});\r\n  }\r\n\r\n  clearHistory(event) {\r\n    localStorage.removeItem('listArray');\r\n    localStorage.removeItem('ipData');\r\n    this.setState({\r\n      list: [],\r\n      info: []\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"form_check_ip\" onSubmit={this.handleSubmit.bind(this)}>\r\n          <label>\r\n            <p className=\"title\">Введите ip-адрес</p>\r\n            <input \r\n            type=\"text\"\r\n            placeholder=\"Ip-адрес...\"\r\n            value={this.state.ip}\r\n            onChange={this.handleIpChange.bind(this)} \r\n             />\r\n          </label>\r\n          <p><button className=\"submit\">Проверить</button></p>\r\n        </form>\r\n        <div>\r\n          <ul className=\"ip-adress\">\r\n            {this.state.list.map((adress, index) => \r\n                  <li key={index}>Ip-адрес: {adress}</li>\r\n                \r\n              )}\r\n          </ul>\r\n          <ul className=\"city\">\r\n          {this.state.info.map((info, index) => \r\n                  <li key={index}>Город: {info}</li>\r\n              )}\r\n          </ul>\r\n        </div>\r\n        <form className=\"form_check_ip\">\r\n        <p><button \r\n        className=\"submit\"\r\n        onClick={this.clearHistory.bind(this)}\r\n        >Очистить историю</button></p>\r\n        </form>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CheckIp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CheckIp from './CheckIp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CheckIp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}